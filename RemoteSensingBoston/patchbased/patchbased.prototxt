name: "patchbased"



layer {
  name: "pairdata"
  type: "ImagePairData"
  top: "data"
  top: "label"
  image_pair_data_param {
    image_dir: "pathToDataset/mass_buildings/train/sat"
    label_dir: "pathToDataset/mass_buildings/train/map"
    batch_size: 64
    h_img: 64
    w_img: 64
    h_map: 16
    w_map: 16
    scale: 0.00390625
    #scale: 0.008
  }
  include: { phase: TRAIN }
}



layer {
  name: "data"
  type: "ImagePairData"
  top: "data"
  top: "label"
  image_pair_data_param {
    image_dir: "pathToDataset/mass_buildings/test/sat"
    label_dir: "pathToDataset/mass_buildings/test/map"
    batch_size: 64
    h_img: 64
    w_img: 64
    h_map: 16
    w_map: 16
    scale: 0.00390625
    #scale: 0.008
    random: false
  }
  include: { phase: TEST }
}



layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 64
    kernel_size: 12
    stride: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "reluconv1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}



layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  convolution_param {
    num_output: 112
    kernel_size: 4
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  
}
layer {
  name: "reluconv2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2"
  top: "conv3"
  convolution_param {
    num_output: 80
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  
}

layer {
  name: "reluconv3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}


layer {
  name: "fc"
  type: "InnerProduct"
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "conv3"
  top: "fc"
}

layer {
    name: "reshape"
    type: "Reshape"
    bottom: "fc"
    top: "output"
    reshape_param {
      shape {
        dim: 0  # copy the dimension from below
        dim: 1
        dim: 16
        dim: -1 # infer it from the other dimensions
      }
    }
  }



layer {
  name: "prob"
  type: "Sigmoid"
  bottom: "output"
  top: "prob"
  include: {phase: TEST}
}

#without this layer all prob values are printed
#during TEST phase
layer {
	name: "silence"
	type: "Silence"
	bottom: "prob"
	include: {phase: TEST}
}


layer {
  name: "loss"
  type: "SigmoidCrossEntropyLoss"
  bottom: "output"
  bottom: "label"
  top: "loss"
  include: {phase: TRAIN}
}
